-- previous month of platinum is loaded as platinums current month... we just need something

-- we erease the remaining balance and factor 

-- THIS IS DONE BEFORE we do the called procedure

-- Won't generally need to use this 
DELETE FROM platinumbodies
WHERE date = '2021-10-01';


-- I load the previous month platinum as current month
-- and set all the things we are going to recalulate
UPDATE platinumbodies
SET factor = 0,
    remainingbalance = 0,
    gwac = 0,
    wam = 0,
    wala = 0
WHERE date = '2021-10-01';







---------------------------------------------------------------------------


create or replace PROCEDURE platinumsfactorearly(currentmonth DATE)
language plpgsql
as
$$
declare
   countofequals INTEGER := 0;
   numberofplatinums INTEGER;
begin

    DROP TABLE IF EXISTS currpools, currplats, currfacepoolandplat, platcurrface;  

    --  we get the factor for the pools
    CREATE TEMP TABLE currpools AS
    SELECT
        pools.cusip,
        name,
        indicator,
        originalface,
        poolbodies."remainingBalance",
        poolbodies."remainingBalance" / originalface AS factor
    FROM pools
    INNER JOIN poolbodies
    ON pools.cusip = poolbodies.cusip
    WHERE poolbodies.date = currentmonth;


    ---- we get platinum data
    CREATE TEMP TABLE currplats AS
    SELECT
        platinums.cusip,
        name,
        originalface,
        platinumbodies.remainingbalance,
        platinumbodies.remainingbalance / originalface AS factor
    FROM platinums
    INNER JOIN platinumbodies
    ON platinums.cusip = platinumbodies.cusip
    WHERE platinumbodies.date = currentmonth;
    -- LIMIT 3;


    -- this gets me the platinums for the month I wanto to check
    SELECT COUNT(*)
    INTO numberofplatinums
    FROM platinumbodies
    WHERE platinumbodies.date = currentmonth;

    RAISE NOTICE '%', numberofplatinums; 

    WHILE numberofplatinums > countofequals loop

        -- we use platcolls to check for face in platinum and mutiple it by the factor to get current face 

        CREATE TEMP TABLE currfacepoolandplat AS
        SELECT 
            platcolls.cusip,
            (faceinplatinum / 100) * currpools.factor AS currfacepool,
            (faceinplatinum / 100) * currplats.factor AS currfaceplat    
        FROM platcolls
        LEFT JOIN currpools
        ON platcolls.poolname = currpools.name
        AND platcolls.indicator = currpools.indicator
        LEFT JOIN currplats
        ON platcolls.poolname = currplats.name;
        -- LIMIT 3;

    -- we sum the current face by platinum cusip

        CREATE TEMP TABLE platcurrface AS
        SELECT
            cusip,
            SUM(COALESCE(currfacepool, 0)) + SUM(COALESCE(currfaceplat, 0)) AS currentface    
        FROM currfacepoolandplat
        GROUP BY cusip;
        -- LIMIT 3; 

        SELECT COUNT(*)
        INTO countofequals
        FROM platcurrface
        INNER JOIN currplats
        ON platcurrface.cusip = currplats.cusip
        WHERE platcurrface.currentface = currplats.remainingbalance;

        RAISE NOTICE '%', countofequals; 

        UPDATE currplats
        SET remainingbalance = currentface,
            factor = currentface / originalface 
        FROM platcurrface 
        WHERE currplats.cusip = platcurrface.cusip;

        DROP TABLE currfacepoolandplat, platcurrface;

    END loop; 

    UPDATE platinumbodies
    SET remainingbalance = currplats.remainingbalance,
        factor = currplats.factor 
    FROM currplats 
    WHERE currplats.cusip = platinumbodies.cusip
    AND platinumbodies.date = currentmonth;    

    DROP TABLE IF EXISTS currpools, currplats, currfacepoolandplat, platcurrface;  

end;

$$;

-- SEEMS to work fine :)

call platinumsfactorearly('2021-10-01');


-- so first calcilate facors


-- Step 1 :   Current face of each platinum for month m (We are actually given this as remainingBalance)

-- = sum   original face of pool i in the platinum * factor of pool i for month m

-- Step 2 :   Weight of each pool i in platinum for the month m (we are given this too but calculating is a bit more accurate)

-- = original face of pool i in the platinum * factor of pool i for month m  /  Current face of platinum for month m


-- For each platinum made up of n pools we have our weights w_i

-- WAM = sum w_i * wam_pool i

-- We can repeat this for WALA  / WAC

UPDATE platinumbodies
SET 
    -- factor = 0,
    -- remainingbalance = 0,
    gwac = 0,
    wam = 0,
    wala = 0
WHERE date = '2021-10-01';




create or replace PROCEDURE wamwalawac(currentmonth DATE, pastmonth DATE)
language plpgsql
as
$$
declare
   countofequalswam INTEGER := 0;
   countofequalswala INTEGER := 0;
   countofequalswac INTEGER := 0;
   numberofplatinums INTEGER;
begin

    DROP TABLE IF EXISTS currpools, currplats, platcollsweneed, weightxwam, platwam;

    -- get pool data

    CREATE TEMP TABLE currpools AS
    SELECT
        pools.cusip,
        pools.name,
        pools.indicator,
        pools.originalface,
        poolbodies."remainingBalance",
        poolbodies."WAM",
        poolbodies."WALA",
        poolbodies."GWAC"
    -- INTO TEMP TABLE currpools
    FROM
        pools
    INNER JOIN poolbodies ON pools.cusip = poolbodies.cusip
    WHERE poolbodies.date = currentmonth
    AND poolbodies."remainingBalance" > 0;


    -- what we need from plats

    CREATE TEMP TABLE currplats AS
    SELECT
        platinums.cusip,
        platinums.name,
        platinums.originalface,
        platinumbodies.remainingbalance,
        platinumbodies.wam,
        platinumbodies.wala,
        platinumbodies.gwac
    -- INTO TEMP TABLE currplats
    FROM
        platinums
        INNER JOIN platinumbodies ON platinums.cusip = platinumbodies.cusip
    WHERE
        platinumbodies.date = currentmonth
    AND remainingbalance > 0 ;

    -- what we need from platcolls from month M
    -- I think this is just if we want to try and do it in the past so I have platcolls loaded till october but want to check for June
    -- not entirely sure though and I believe the past month is like the current month 
    CREATE TEMP TABLE platcollsweneed AS
    SELECT
        platcolls.cusip AS platcusip,
        platcolls.poolname,
        platcolls.indicator,
        platcolls.faceinplatinum,
        platcolls.born,
        currplats.remainingbalance    
    -- INTO TEMP TABLE platcollsweneed
    FROM
        platcolls
    INNER JOIN currplats
    ON currplats.cusip = platcolls.cusip
    WHERE
        platcolls.born <= pastmonth;

    -- LIMIT 2;

    SELECT COUNT(*)
    INTO numberofplatinums
    FROM currplats;

    RAISE NOTICE '%', numberofplatinums;

    WHILE (numberofplatinums > countofequalswam OR numberofplatinums > countofequalswala OR numberofplatinums > countofequalswac ) loop

        CREATE TEMP TABLE weightxwam AS
        SELECT
            platcollsweneed.platcusip,
            platcollsweneed.poolname,
            platcollsweneed.indicator,
            platcollsweneed.faceinplatinum,
            platcollsweneed.remainingbalance, 
            currpools.cusip as poolcusip,
            currpools."remainingBalance" / currpools.originalface AS poolfactor,
            platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) AS ofxfactor,
            (platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance AS weightpool,
            ((platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance) * currpools."WAM" AS weightxwampool,
            ((platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance) * currpools."WALA" AS weightxwalapool,
            ((platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance) * currpools."GWAC" AS weightxwacpool,
            currplats.cusip  as platinplatcusip,
            currplats.remainingbalance / currplats.originalface AS platfactor,
            platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            ) AS ofplatxfactor,
            (platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance AS weightplat,
            ((platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance) * currplats.wam AS weightxwamplat,
            ((platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance) * currplats.wala AS weightxwalaplat,
            ((platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance) * currplats.gwac AS weightxwacplat
        -- so I should be able to make this it's own table limit by born date and be fine
        -- INTO TEMP TABLE weightxwam
        FROM
            platcollsweneed
        LEFT JOIN currpools 
        ON platcollsweneed.poolname = currpools.name
        AND platcollsweneed.indicator = currpools.indicator
        LEFT JOIN currplats ON platcollsweneed.poolname = currplats.name
        WHERE
            (
            currpools.cusip IS NOT NULL
            OR 
            currplats.cusip IS NOT NULL
            )
        -- LIMIT 2    
            ;


        -- summing the originl face X factor
        -- CREATE TEMP TABLE platcurrface AS
        CREATE TEMP TABLE platwam AS
        SELECT
            platcusip AS cusip,
            CAST ((SUM(
                COALESCE(weightxwampool, 0) + COALESCE(weightxwamplat, 0)
            ) / 100) AS INTEGER)  AS wam,
                    CAST ((SUM(
                COALESCE(weightxwalapool, 0) + COALESCE(weightxwalaplat, 0)
            ) / 100) AS INTEGER)  AS wala,
            SUM(
                COALESCE(weightxwacpool, 0) + COALESCE(weightxwacplat, 0)
            ) / 100  AS wac
        -- INTO TEMP TABLE platwam
        FROM weightxwam
        -- WHERE platcusip = '36225AAB6'
        GROUP BY
            platcusip;
        -- LIMIT 3;


        SELECT COUNT(*)
        INTO countofequalswam
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wam = currplats.wam;

        SELECT COUNT(*)
        INTO countofequalswala
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wala = currplats.wala;

        SELECT COUNT(*)
        INTO countofequalswac
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wac = currplats.gwac;



        RAISE NOTICE 'wam: %  wala: %  wac: %', countofequalswam, countofequalswala, countofequalswac; 

        UPDATE currplats
        SET 
            wam = platwam.wam,
            wala = platwam.wala,
            gwac = platwam.wac
        FROM platwam 
        WHERE currplats.cusip = platwam.cusip;

        DROP TABLE weightxwam, platwam;

    END loop; 

    UPDATE platinumbodies
    SET wam = currplats.wam,
        wala = currplats.wala,
        gwac = ROUND(CAST(currplats.gwac AS numeric), 3) 
    FROM currplats 
    WHERE currplats.cusip = platinumbodies.cusip
    AND platinumbodies.date = currentmonth;    



    DROP TABLE IF EXISTS currpools, currplats, platcollsweneed, weightxwam, platwam;

 end;

$$;    

call wamwalawac('2021-10-01', '2021-09-01');

    -- combining the three to get current face of plats for month m 

    -----------------------------------------------------------------------------------------------------------

    -- CREATE TEMP TABLE ofxfactor AS

    SELECT
        platcollsweneed.platcusip,
        platcollsweneed.poolname,
        platcollsweneed.indicator,
        platcollsweneed.faceinplatinum,
        platcollsweneed.remainingbalance, 
        currpools.cusip as poolcusip,
        currpools."remainingBalance" / currpools.originalface AS poolfactor,
        platcollsweneed.faceinplatinum * (
        currpools."remainingBalance" / currpools.originalface
        ) AS ofxfactor,
        (platcollsweneed.faceinplatinum * (
        currpools."remainingBalance" / currpools.originalface
        ) ) / platcollsweneed.remainingbalance AS weightpool,
        ((platcollsweneed.faceinplatinum * (
        currpools."remainingBalance" / currpools.originalface
        ) ) / platcollsweneed.remainingbalance) * currpools."WAM" AS weightxwampool,
        ((platcollsweneed.faceinplatinum * (
        currpools."remainingBalance" / currpools.originalface
        ) ) / platcollsweneed.remainingbalance) * currpools."WALA" AS weightxwalapool,
        ((platcollsweneed.faceinplatinum * (
        currpools."remainingBalance" / currpools.originalface
        ) ) / platcollsweneed.remainingbalance) * currpools."GWAC" AS weightxwacpool,
        currplats.cusip  as platinplatcusip,
        currplats.remainingbalance / currplats.originalface AS platfactor,
        platcollsweneed.faceinplatinum * (
        currplats.remainingbalance / currplats.originalface
        ) AS ofplatxfactor,
        (platcollsweneed.faceinplatinum * (
        currplats.remainingbalance / currplats.originalface
        )) / platcollsweneed.remainingbalance AS weightplat,
        ((platcollsweneed.faceinplatinum * (
        currplats.remainingbalance / currplats.originalface
        )) / platcollsweneed.remainingbalance) * currplats.wam AS weightxwamplat,
        ((platcollsweneed.faceinplatinum * (
        currplats.remainingbalance / currplats.originalface
        )) / platcollsweneed.remainingbalance) * currplats.wala AS weightxwalaplat,
        ((platcollsweneed.faceinplatinum * (
        currplats.remainingbalance / currplats.originalface
        )) / platcollsweneed.remainingbalance) * currplats.gwac AS weightxwacplat
    -- so I should be able to make this it's own table limit by born date and be fine
    INTO TEMP TABLE weightxwam
    FROM
        platcollsweneed
    LEFT JOIN currpools 
    ON platcollsweneed.poolname = currpools.name
    AND platcollsweneed.indicator = currpools.indicator
    LEFT JOIN currplats ON platcollsweneed.poolname = currplats.name
    WHERE
        (
        currpools.cusip IS NOT NULL
        OR 
        currplats.cusip IS NOT NULL
        )
    -- LIMIT 2    
        ;


    -- summing the originl face X factor
    -- CREATE TEMP TABLE platcurrface AS
    SELECT
        platcusip AS cusip,
        CAST ((SUM(
            COALESCE(weightxwampool, 0) + COALESCE(weightxwamplat, 0)
        ) / 100) AS INTEGER)  AS wam,
                CAST ((SUM(
            COALESCE(weightxwalapool, 0) + COALESCE(weightxwalaplat, 0)
        ) / 100) AS INTEGER)  AS wala,
        SUM(
            COALESCE(weightxwacpool, 0) + COALESCE(weightxwacplat, 0)
        ) / 100  AS wac
    INTO TEMP TABLE platwam
    FROM weightxwam
    -- WHERE platcusip = '36225AAB6'
    GROUP BY
        platcusip;
    -- LIMIT 3;


        SELECT COUNT(*)
        -- INTO countofequals
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wam = currplats.wam;

        SELECT COUNT(*)
        -- INTO countofequals
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wala = currplats.wala;

        SELECT COUNT(*)
        -- INTO countofequals
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wac = currplats.gwac;



        -- RAISE NOTICE '%', countofequals; 

        UPDATE currplats
        SET 
            wam = platwam.wam,
            wala = platwam.wala,
            gwac = platwam.wac
        FROM platwam 
        WHERE currplats.cusip = platwam.cusip;

        DROP TABLE weightxwam, platwam;








    -- This could probably be prettier
    SELECT COUNT(*)
    INTO numberofplatinums    
    FROM 
        (
        SELECT cusip 
        FROM platinumbodies
        WHERE DATE = currentmonth
        ) AS x
    INNER JOIN
        (
        SELECT cusip 
        FROM platinumbodies
        WHERE DATE = pastmonth
        ) AS y
    ON x.cusip = y.cusip;

    RAISE NOTICE '%', numberofplatinums; 

    WHILE numberofplatinums > countofequals loop
