-------------Was predicted  with a couple of changes should be prediction next

-- SHould innclude something about what need to be loads 

-- for this i think we just need pools, plats and platcolls all on the same page 

-- The formula

-- SMM = 1 - Power( 1 - CPR / 100, 1/12 ) - so even a minor error in CPR can cause major

-- CPR = 1 - power( 1- SMM, 12 )

-- Step 1 :   Current face of each platinum for month m (We are actually given this as remainingBalance)

-- = sum   original face of pool i in the platinum * factor of pool i for month m

-- Step 2 :   Weight of each pool i in platinum for the month m (we are given this too but calculating is a bit more accurate)

-- = original face of pool i in the platinum * factor of pool i for month m  /  Current face of platinum for month m

-- Step 3 :   SMM of platinum for month m+1

-- = sum weight of each pool i for month m  * SMM of pool i for month m+1

-- Step 4 : CPR of the platinum for month m+1

-- Use SMM to CPR formula

--- first time should be able to COPY and paste the whole thing run these

-- we only have one actual cpr from july so we are trying it with our june ginnie mae data
-- this first part is pretty much step 1 and two doing things to get the weight of eacg pool..

-- what we need from pools from month M

-- using variables will try and trim it down more the next month 11/13/21


\set currentmonth 'date ''2021-10-01'''

\set pastmonth 'date ''2021-09-01'''

SELECT
    pools.cusip,
    pools.name,
    pools.indicator,
    pools.originalface,
    poolbodies."remainingBalance"
INTO TEMP TABLE currpoolscpr 
FROM
    pools
    INNER JOIN poolbodies ON pools.cusip = poolbodies.cusip
WHERE
    poolbodies.date = :pastmonth;


-- what we need from plats

SELECT
    platinums.cusip,
    platinums.name,
    platinums.originalface,
    platinumbodies.remainingbalance
INTO TEMP TABLE currplatscpr 
FROM
    platinums
    INNER JOIN platinumbodies ON platinums.cusip = platinumbodies.cusip
WHERE
    platinumbodies.date = :pastmonth;

-- what we need from platcolls from month M

SELECT
  platcolls.cusip AS platcusip,
  platcolls.poolname,
  platcolls.indicator,
  platcolls.faceinplatinum,
  platcolls.born   
INTO TEMP TABLE platcollsweneed 
FROM
  platcolls
WHERE
  platcolls.born <= :pastmonth;

-- LIMIT 2;


-- combining the three to get current face of plats for month m 

SELECT
    platcollsweneed.platcusip,
    platcollsweneed.poolname,
    platcollsweneed.indicator,
    platcollsweneed.faceinplatinum,
    currpoolscpr.cusip as poolcusip,
    currpoolscpr."remainingBalance" / currpoolscpr.originalface AS poolfactor,
    platcollsweneed.faceinplatinum * (
    currpoolscpr."remainingBalance" / currpoolscpr.originalface
    ) AS ofxfactor,
    currplatscpr.cusip  as platinplatcusip,
    currplatscpr.remainingbalance / currplatscpr.originalface AS platfactor,
    platcollsweneed.faceinplatinum * (
    currplatscpr.remainingbalance / currplatscpr.originalface
    ) AS ofplatxfactor
INTO TEMP TABLE ofxfactorcpr
-- so I should be able to make this it's own table limit by born date and be fine
FROM
    platcollsweneed
LEFT JOIN currpoolscpr 
ON platcollsweneed.poolname = currpoolscpr.name
AND platcollsweneed.indicator = currpoolscpr.indicator
LEFT JOIN currplatscpr ON platcollsweneed.poolname = currplatscpr.name
WHERE
    (
    currpoolscpr.cusip IS NOT NULL
    OR currplatscpr.cusip IS NOT NULL
    );


-- summing the originl face X factor

SELECT
  platcusip,
  SUM(
    COALESCE(ofxfactor, 0) + COALESCE(ofplatxfactor, 0)
  ) / 100 AS currface
INTO TEMP TABLE platcurrfacecpr
FROM ofxfactorcpr
-- WHERE platcusip = '36225A2E9'
GROUP BY
  platcusip;

-- CHANGE TO PREDICTED NEXT
-- current pools with predicted cpr for month M + 1, will need in next steps 

 SELECT
  currpoolscpr.cusip,
  currpoolscpr.name,
  currpoolscpr.indicator,
  currpoolscpr.originalface,
  currpoolscpr."remainingBalance",
  poolpredictions."cprNext" AS predictedcprnext
INTO TEMP TABLE currpoolscprwpredictednext  
FROM
  currpoolscpr
-- I guess it needs to be inner join becuase we need a cpr??
-- this is where I had to deal with a null value I believe  
INNER JOIN poolpredictions ON  currpoolscpr.cusip = poolpredictions.cusip
WHERE poolpredictions.date = :currentmonth;


---------------------------------------------------------------------
-- after first time uncomment from here and run 
DROP TABLE platpredictedcprnext, currplatswithpredictedcprnext, almoststepthree, stepthree, stepfour;

-- so the cprs are for month + 1

SELECT 
  platinumbodies.cusip,
  platinumbodies.predictedcprnext
INTO TEMP TABLE platpredictedcprnext
FROM  platinumbodies
WHERE date = :currentmonth;

-- so plat info for month m and cpr for m+1 
-- ok all good so far

SELECT
  currplatscpr.cusip,
  currplatscpr.name,
  currplatscpr.originalface,
  currplatscpr.remainingbalance,
  platpredictedcprnext.predictedcprnext
INTO TEMP TABLE currplatswithpredictedcprnext
FROM currplatscpr
INNER JOIN platpredictedcprnext ON currplatscpr.cusip = platpredictedcprnext.cusip;

--------------------------------------------------------------------------------------------------------------------------
-- Needs to be updated 
-- step three without summing

SELECT
  platcollsweneed.platcusip AS platinumcusip,
  platcollsweneed.poolname,
  platcollsweneed.indicator,
  currpoolscprwpredictednext.cusip as poolcusip,
  (
    platcollsweneed.faceinplatinum * (
      currpoolscprwpredictednext."remainingBalance" / currpoolscprwpredictednext.originalface
    )
  ) / platcurrfacecpr.currface AS weightofpool,
  currpoolscprwpredictednext.predictedcprnext,
  (
    1 -(
      POWER(
        (1 -(currpoolscprwpredictednext.predictedcprnext)),
        (cast(1 as float) / cast(12 as float))
      )
    )
  ) AS poolsmm,
  (
    (
      platcollsweneed.faceinplatinum * (
        currpoolscprwpredictednext."remainingBalance" / currpoolscprwpredictednext.originalface
      )
    ) / platcurrfacecpr.currface
  ) * (
    1 -(
      POWER(
        (1 -(currpoolscprwpredictednext.predictedcprnext)),
        (cast(1 as float) / cast(12 as float))
      )
    )
  ) as weightxpoolssm,
  currplatswithpredictedcprnext.cusip as platcusip,
  (
    platcollsweneed.faceinplatinum * (currplatswithpredictedcprnext.remainingbalance / currplatswithpredictedcprnext.originalface)
  ) / platcurrfacecpr.currface AS weightofplat,
  currplatswithpredictedcprnext.predictedcprnext AS platcpr,
  (
    1 -(
      POWER(
        (1 -(currplatswithpredictedcprnext.predictedcprnext)),
        (cast(1 as float) / cast(12 as float))
      )
    )
  ) AS platsmm,
  (
    (
      platcollsweneed.faceinplatinum * (currplatswithpredictedcprnext.remainingbalance / currplatswithpredictedcprnext.originalface)
    ) / platcurrfacecpr.currface
  ) * (
    1 -(
      POWER(
        (1 -(currplatswithpredictedcprnext.predictedcprnext)),
        (cast(1 as float) / cast(12 as float))
      )
    )
  ) as weightxplatssm
INTO TEMP TABLE almoststepthree
-- would need to use same table here  
FROM
  platcollsweneed
INNER JOIN platcurrfacecpr
  ON platcollsweneed.platcusip = platcurrfacecpr.platcusip
LEFT JOIN currpoolscprwpredictednext
  ON platcollsweneed.poolname = currpoolscprwpredictednext.name
  AND platcollsweneed.indicator = currpoolscprwpredictednext.indicator
LEFT JOIN currplatswithpredictedcprnext ON platcollsweneed.poolname = currplatswithpredictedcprnext.name
WHERE
(
  currpoolscprwpredictednext.cusip IS NOT NULL
  OR currplatswithpredictedcprnext.cusip IS NOT NULL
)
-- if it is zero it probably should not be there 
AND platcurrfacecpr.currface > 0
-- AND platcollsweneed.cusip = '36225A2E9'
ORDER BY
platcollsweneed.poolname;

----------
-- summing almost step three to get step three

SELECT
  almoststepthree.platinumcusip,
  -- not sure why we divide by 100
  SUM(
    COALESCE(almoststepthree.weightxpoolssm, 0) + COALESCE(almoststepthree.weightxplatssm, 0)
  ) / 100 AS smm
INTO TEMP TABLE stepthree
FROM almoststepthree
GROUP BY
  almoststepthree.platinumcusip;


-- \COPY (SELECT cusip, cpr from platinumbodies where date = :pastmonth) to 'C:\Users\micha\platcpr' csv header; 

-- THIS IS All testing how to improve the while loop


--  just a temp table 
SELECT 
  platinumcusip, 
  (1 - POWER((1 - smm), 12)) AS predictedcprnext 
INTO TEMP TABLE stepfour  
FROM stepthree;


---------- so I can use this to see if the tables are equal then run the above to update then rerun the query

SELECT COUNT(*) 
FROM stepfour
INNER JOIN platinumbodies
ON stepfour.platinumcusip = platinumbodies.cusip
WHERE stepfour.predictedcprnext = platinumbodies.predictedcprnext
AND platinumbodies.date = :currentmonth;


--- This will update platinum bodies cprs now with m + 1

UPDATE platinumbodies
SET predictedcprnext = stepfour.predictedcprnext
FROM stepfour
WHERE stepfour.platinumcusip = platinumbodies.cusip
AND platinumbodies.date = :currentmonth;



--- this can erease all the cprs
-- UPDATE platinumbodies
-- SET cpr = NULL
-- WHERE platinumbodies.date = '2021-08-01';


--------- some testing stuff has not been changed to predictions
select count(*)
FROM platinumbodies
WHERE cpr is NULL 
AND date = '2021-08-01'

select *
FROM platinumbodies 
INNER JOIN platinumbodies AS x
ON platinumbodies.cusip = x.cusip
WHERE platinumbodies.cpr = x.cpr 
AND platinumbodies.date = '2021-06-01'
AND x.date = '2021-07-01'
LIMIT 10;


SELECT
  platcolls.cusip AS platcusip,
  platcolls.poolname,
  platcolls.indicator,
  platcolls.faceinplatinum,
  platcolls.active,
  platcolls.born   
INTO TEMP TABLE platcollsweneedtest 
FROM
  platcolls
WHERE
  platcolls.born <= '2021-07-01'
AND (
  platcolls.terminated > '2021-07-01' OR platcolls.terminated IS NULL );







--------------ALTER TABLE 

ALTER TABLE platinumbodies
ADD predictedcprnext float;