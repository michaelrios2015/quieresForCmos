
-- it works 11/28/21 -- it would be better to go back and make it more readable but it works

-- Step 1 :   Current face of each platinum for month m (We are actually given this as remainingBalance)

-- = sum   original face of pool i in the platinum * factor of pool i for month m

-- Step 2 :   Weight of each pool i in platinum for the month m (we are given this too but calculating is a bit more accurate)

-- = original face of pool i in the platinum * factor of pool i for month m  /  Current face of platinum for month m


-- For each platinum made up of n pools we have our weights w_i

-- WAM = sum w_i * wam_pool i

-- We can repeat this for WALA  / WAC

UPDATE platinumbodies
SET 
    -- factor = 0,
    -- remainingbalance = 0,
    gwac = 0,
    wam = 0,
    wala = 0
WHERE date = '2021-10-01';




create or replace PROCEDURE wamwalawac(currentmonth DATE, pastmonth DATE)
language plpgsql
as
$$
declare
   countofequalswam INTEGER := 0;
   countofequalswala INTEGER := 0;
   countofequalswac INTEGER := 0;
   numberofplatinums INTEGER;
begin

    DROP TABLE IF EXISTS currpools, currplats, platcollsweneed, weightxwam, platwam;

    -- get pool data

    CREATE TEMP TABLE currpools AS
    SELECT
        pools.cusip,
        pools.name,
        pools.indicator,
        pools.originalface,
        poolbodies."remainingBalance",
        poolbodies."WAM",
        poolbodies."WALA",
        poolbodies."GWAC"
    -- INTO TEMP TABLE currpools
    FROM
        pools
    INNER JOIN poolbodies ON pools.cusip = poolbodies.cusip
    WHERE poolbodies.date = currentmonth
    AND poolbodies."remainingBalance" > 0;


    -- what we need from plats

    CREATE TEMP TABLE currplats AS
    SELECT
        platinums.cusip,
        platinums.name,
        platinums.originalface,
        platinumbodies.remainingbalance,
        platinumbodies.wam,
        platinumbodies.wala,
        platinumbodies.gwac
    -- INTO TEMP TABLE currplats
    FROM
        platinums
        INNER JOIN platinumbodies ON platinums.cusip = platinumbodies.cusip
    WHERE
        platinumbodies.date = currentmonth
    AND remainingbalance > 0 ;

    -- what we need from platcolls from month M
    -- I think this is just if we want to try and do it in the past so I have platcolls loaded till october but want to check for June
    -- not entirely sure though and I believe the past month is like the current month 
    CREATE TEMP TABLE platcollsweneed AS
    SELECT
        platcolls.cusip AS platcusip,
        platcolls.poolname,
        platcolls.indicator,
        platcolls.faceinplatinum,
        platcolls.born,
        currplats.remainingbalance    
    -- INTO TEMP TABLE platcollsweneed
    FROM
        platcolls
    INNER JOIN currplats
    ON currplats.cusip = platcolls.cusip
    WHERE
        platcolls.born <= pastmonth;

    -- LIMIT 2;

    SELECT COUNT(*)
    INTO numberofplatinums
    FROM currplats;

    RAISE NOTICE '%', numberofplatinums;

    WHILE (numberofplatinums > countofequalswam OR numberofplatinums > countofequalswala OR numberofplatinums > countofequalswac ) loop

        CREATE TEMP TABLE weightxwam AS
        SELECT
            platcollsweneed.platcusip,
            platcollsweneed.poolname,
            platcollsweneed.indicator,
            platcollsweneed.faceinplatinum,
            platcollsweneed.remainingbalance, 
            currpools.cusip as poolcusip,
            currpools."remainingBalance" / currpools.originalface AS poolfactor,
            platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) AS ofxfactor,
            (platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance AS weightpool,
            ((platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance) * currpools."WAM" AS weightxwampool,
            ((platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance) * currpools."WALA" AS weightxwalapool,
            ((platcollsweneed.faceinplatinum * (
            currpools."remainingBalance" / currpools.originalface
            ) ) / platcollsweneed.remainingbalance) * currpools."GWAC" AS weightxwacpool,
            currplats.cusip  as platinplatcusip,
            currplats.remainingbalance / currplats.originalface AS platfactor,
            platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            ) AS ofplatxfactor,
            (platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance AS weightplat,
            ((platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance) * currplats.wam AS weightxwamplat,
            ((platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance) * currplats.wala AS weightxwalaplat,
            ((platcollsweneed.faceinplatinum * (
            currplats.remainingbalance / currplats.originalface
            )) / platcollsweneed.remainingbalance) * currplats.gwac AS weightxwacplat
        -- so I should be able to make this it's own table limit by born date and be fine
        -- INTO TEMP TABLE weightxwam
        FROM
            platcollsweneed
        LEFT JOIN currpools 
        ON platcollsweneed.poolname = currpools.name
        AND platcollsweneed.indicator = currpools.indicator
        LEFT JOIN currplats ON platcollsweneed.poolname = currplats.name
        WHERE
            (
            currpools.cusip IS NOT NULL
            OR 
            currplats.cusip IS NOT NULL
            )
        -- LIMIT 2    
            ;


        -- summing the originl face X factor
        -- CREATE TEMP TABLE platcurrface AS
        CREATE TEMP TABLE platwam AS
        SELECT
            platcusip AS cusip,
            CAST ((SUM(
                COALESCE(weightxwampool, 0) + COALESCE(weightxwamplat, 0)
            ) / 100) AS INTEGER)  AS wam,
                    CAST ((SUM(
                COALESCE(weightxwalapool, 0) + COALESCE(weightxwalaplat, 0)
            ) / 100) AS INTEGER)  AS wala,
            SUM(
                COALESCE(weightxwacpool, 0) + COALESCE(weightxwacplat, 0)
            ) / 100  AS wac
        -- INTO TEMP TABLE platwam
        FROM weightxwam
        -- WHERE platcusip = '36225AAB6'
        GROUP BY
            platcusip;
        -- LIMIT 3;


        SELECT COUNT(*)
        INTO countofequalswam
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wam = currplats.wam;

        SELECT COUNT(*)
        INTO countofequalswala
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wala = currplats.wala;

        SELECT COUNT(*)
        INTO countofequalswac
        FROM platwam
        INNER JOIN currplats
        ON platwam.cusip = currplats.cusip
        WHERE platwam.wac = currplats.gwac;



        RAISE NOTICE 'wam: %  wala: %  wac: %', countofequalswam, countofequalswala, countofequalswac; 

        UPDATE currplats
        SET 
            wam = platwam.wam,
            wala = platwam.wala,
            gwac = platwam.wac
        FROM platwam 
        WHERE currplats.cusip = platwam.cusip;

        DROP TABLE weightxwam, platwam;

    END loop; 

    UPDATE platinumbodies
    SET wam = currplats.wam,
        wala = currplats.wala,
        gwac = ROUND(CAST(currplats.gwac AS numeric), 3) 
    FROM currplats 
    WHERE currplats.cusip = platinumbodies.cusip
    AND platinumbodies.date = currentmonth;    



    DROP TABLE IF EXISTS currpools, currplats, platcollsweneed, weightxwam, platwam;

 end;

$$;    

call wamwalawac('2021-10-01', '2021-09-01');

    -- combining the three to get current face of plats for month m 

    -----------------------------------------------------------------------------------------------------------

